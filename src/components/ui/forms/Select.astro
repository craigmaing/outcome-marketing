---
// Form Select Component for Outcome Digital Marketing Design System
export interface Props {
  name: string;
  id?: string;
  label?: string;
  options: Array<{
    value: string;
    label: string;
    disabled?: boolean;
  }>;
  placeholder?: string;
  value?: string;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  hint?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'outlined' | 'filled';
  class?: string;
  labelClass?: string;
  selectClass?: string;
}

const {
  name,
  id,
  label,
  options,
  placeholder,
  value,
  required = false,
  disabled = false,
  error,
  hint,
  size = 'md',
  variant = 'default',
  class: className = '',
  labelClass = '',
  selectClass = '',
} = Astro.props;

// Generate unique ID if not provided
const selectId = id || `select-${name}-${Math.random().toString(36).substr(2, 9)}`;

// Generate base classes
const baseClasses = 'block w-full rounded-md border transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed appearance-none bg-white';

// Size classes
const sizeClasses = {
  sm: 'px-3 py-2 text-sm pr-8',
  md: 'px-4 py-3 text-base pr-10',
  lg: 'px-5 py-4 text-lg pr-12'
};

// Variant classes
const variantClasses = {
  default: 'border-neutral-300 focus:border-primary-blue focus:ring-primary-blue',
  outlined: 'border-2 border-neutral-300 focus:border-primary-blue focus:ring-primary-blue',
  filled: 'border-neutral-200 bg-neutral-50 focus:border-primary-blue focus:ring-primary-blue focus:bg-white'
};

// Error classes
const errorClasses = error 
  ? 'border-error focus:border-error focus:ring-error' 
  : '';

// Combine all select classes
const selectClasses = `${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]} ${errorClasses} ${selectClass}`.trim();

// Label classes
const labelClassesCombined = `block text-sm font-medium text-neutral-700 mb-2 ${error ? 'text-error' : ''} ${labelClass}`.trim();

// Hint/error text classes
const hintTextClasses = `mt-2 text-sm ${error ? 'text-error' : 'text-neutral-500'}`;

// Container classes for the custom select
const containerClasses = 'relative';
---

<div class={`form-group ${className}`}>
  {label && (
    <label for={selectId} class={labelClassesCombined}>
      {label}
      {required && <span class="text-error ml-1">*</span>}
    </label>
  )}
  
  <div class={containerClasses}>
    <select
      name={name}
      id={selectId}
      required={required}
      disabled={disabled}
      class={selectClasses}
      aria-describedby={hint || error ? `${selectId}-description` : undefined}
      aria-invalid={error ? 'true' : 'false'}
      aria-required={required ? 'true' : 'false'}
    >
      {placeholder && (
        <option value="" disabled={!required}>{placeholder}</option>
      )}
      
      {options.map((option) => (
        <option 
          value={option.value} 
          selected={value === option.value}
          disabled={option.disabled}
        >
          {option.label}
        </option>
      ))}
    </select>
    
    {/* Custom dropdown arrow */}
    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
      <svg class="w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>
  </div>
  
  {(hint || error) && (
    <div id={`${selectId}-description`} class={hintTextClasses}>
      {error || hint}
    </div>
  )}
</div>
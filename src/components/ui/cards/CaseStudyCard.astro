---
// Case Study Card Component for Outcome Digital Marketing Design System
export interface Props {
  title: string;
  excerpt: string;
  image?: string;
  category?: string;
  tags?: string[];
  metrics?: {
    label: string;
    value: string;
  }[];
  href?: string;
  variant?: 'default' | 'featured';
  class?: string;
  id?: string;
}

const {
  title,
  excerpt,
  image,
  category,
  tags = [],
  metrics = [],
  href,
  variant = 'default',
  class: className = '',
  id,
} = Astro.props;

// Generate base classes
const baseClasses = 'bg-white border border-neutral-200 rounded-lg overflow-hidden transition-all duration-200';

// Variant classes
const variantClasses = {
  default: 'hover:shadow-lg hover:-translate-y-1',
  featured: 'border-l-4 border-l-success shadow-md hover:shadow-xl hover:-translate-y-1'
};

// Combine all classes
const cardClasses = `${baseClasses} ${variantClasses[variant]} ${className}`.trim();

// Generate unique ID if not provided
const cardId = id || `case-study-card-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={cardClasses} id={cardId}>
  {image && (
    <div class="aspect-w-16 aspect-h-9 bg-neutral-100">
      <img 
        src={image} 
        alt={title} 
        class="w-full h-48 object-cover"
        loading="lazy"
      />
    </div>
  )}
  
  <div class="p-6">
    {category && (
      <div class="mb-3">
        <span class="inline-block px-3 py-1 text-xs font-semibold text-primary-blue bg-primary-blue bg-opacity-10 rounded-full">
          {category}
        </span>
      </div>
    )}
    
    <h3 class="text-xl font-semibold text-neutral-800 mb-3 line-clamp-2">{title}</h3>
    
    <p class="text-neutral-600 mb-4 line-clamp-3">{excerpt}</p>
    
    {metrics.length > 0 && (
      <div class="grid grid-cols-2 gap-4 mb-4">
        {metrics.map((metric) => (
          <div class="text-center p-3 bg-neutral-50 rounded">
            <div class="text-2xl font-bold text-success">{metric.value}</div>
            <div class="text-xs text-neutral-600">{metric.label}</div>
          </div>
        ))}
      </div>
    )}
    
    {tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-4">
        {tags.map((tag) => (
          <span class="inline-block px-2 py-1 text-xs text-neutral-600 bg-neutral-100 rounded">
            {tag}
          </span>
        ))}
      </div>
    )}
    
    {href ? (
      <a href={href} class="inline-flex items-center text-primary-blue font-medium hover:text-primary-blue-hover transition-colors">
        Read Case Study
        <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    ) : (
      <button class="inline-flex items-center text-primary-blue font-medium hover:text-primary-blue-hover transition-colors">
        Read Case Study
        <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    )}
  </div>
</div>